/**
 * Wise-r API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GroupResource', 'model/NotAuthorizedOrganisationResponse', 'model/KeyResource', 'model/KeyringResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GroupResource'), require('../model/NotAuthorizedOrganisationResponse'), require('../model/KeyResource'), require('../model/KeyringResource'));
  } else {
    // Browser globals (root is window)
    if (!root.WiserClient) {
      root.WiserClient = {};
    }
    root.WiserClient.GroupsApi = factory(root.WiserClient.ApiClient, root.WiserClient.GroupResource, root.WiserClient.NotAuthorizedOrganisationResponse, root.WiserClient.KeyResource, root.WiserClient.KeyringResource);
  }
}(this, function(ApiClient, GroupResource, NotAuthorizedOrganisationResponse, KeyResource, KeyringResource) {
  'use strict';

  /**
   * Groups service.
   * @module api/GroupsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GroupsApi. 
   * @alias module:api/GroupsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get Group
     * Returns the Group with the given id. Schoollocation permission or a Group permission is needed.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupResource}
     */
    this.getGroup = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getGroup";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth_client_credentials'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GroupResource;

      return this.apiClient.callApi(
        '/v1/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get Groups
     * Returns all Groups, filtered on schoollocation.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.schoollocations Filter on schoollocations (optional, list of id&#39;s)
     * @param {String} opts.schoolyear Filter on schoolyear (optional, filters default on current school year. Example value: 2015-2016)
     * @param {Integer} opts.offset Paging: number of records to skip (optional) (default to 0)
     * @param {Integer} opts.limit Paging: number of records to return (optional, maximal value: 100) (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GroupResource>}
     */
    this.getGroups = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'schoollocations': this.apiClient.buildCollectionParam(opts['schoollocations'], 'multi'),
        'schoolyear': opts['schoolyear'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth_client_credentials'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GroupResource];

      return this.apiClient.callApi(
        '/v1/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get key from keyring
     * Get the key from this Group and the given REST client ID.
     * @param {String} id 
     * @param {String} clientid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyResource}
     */
    this.getKey = function(id, clientid) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getKey";
      }

      // verify the required parameter 'clientid' is set
      if (clientid == undefined || clientid == null) {
        throw "Missing the required parameter 'clientid' when calling getKey";
      }


      var pathParams = {
        'id': id,
        'clientid': clientid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth_client_credentials'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = KeyResource;

      return this.apiClient.callApi(
        '/v1/groups/{id}/keys/{clientid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get keys from keyring
     * Get the keys from this Group.
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyringResource}
     */
    this.getKeys = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling getKeys";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth_client_credentials'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = KeyringResource;

      return this.apiClient.callApi(
        '/v1/groups/{id}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Save a key in keyring
     * Save a key in keyring
     * @param {module:model/KeyResource} body 
     * @param {String} id 
     * @param {String} clientid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyResource}
     */
    this.putKey = function(body, id, clientid) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling putKey";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling putKey";
      }

      // verify the required parameter 'clientid' is set
      if (clientid == undefined || clientid == null) {
        throw "Missing the required parameter 'clientid' when calling putKey";
      }


      var pathParams = {
        'id': id,
        'clientid': clientid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth_client_credentials'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = KeyResource;

      return this.apiClient.callApi(
        '/v1/groups/{id}/keys/{clientid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
  };

  return exports;
}));
